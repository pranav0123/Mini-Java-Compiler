//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class PrintIdVisitor2 extends GJDepthFirst<Arginfo,Arginfo> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	// symbol table
	
	public Arginfo finaltable=new Arginfo();
	Vector<String> vec;
	int abcd=0;
	
	public void exitfunc(int type,int num) {
		//assert(false);
		
		if(type==0){
			System.out.print("Symbol not found");
		}
		else{ 
			System.out.print("Type error");
		}
		System.exit(0);
	 }
	
   public Arginfo visit(NodeList n, Arginfo argu) {
      Arginfo _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Arginfo visit(NodeListOptional n, Arginfo argu) {
      if ( n.present() ) {
         Arginfo _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public Arginfo visit(NodeOptional n, Arginfo argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public Arginfo visit(NodeSequence n, Arginfo argu) {
      Arginfo _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Arginfo visit(NodeToken n, Arginfo argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public Arginfo visit(Goal n, Arginfo argu) {
	   
	   finaltable=argu;
	   
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public Arginfo visit(MainClass n, Arginfo argu) {
      Arginfo _ret=null;
      
      Arginfo temp=new Arginfo(n.f1.f0.tokenImage);
      temp.methodname=new String("main");
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, temp);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public Arginfo visit(TypeDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public Arginfo visit(ClassDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      
      Arginfo temp=new Arginfo(n.f1.f0.tokenImage);
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, temp);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public Arginfo visit(ClassExtendsDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      //System.out.println("Program type checked successfully");
      //System.exit(0);
      Arginfo temp=new Arginfo(n.f1.f0.tokenImage);
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, temp);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public Arginfo visit(VarDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public Arginfo visit(MethodDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      
      Arginfo temp=new Arginfo();
      temp.classname=(temp.classname+argu.classname);
      temp.methodname=(temp.methodname+n.f2.f0.tokenImage);
      
      n.f0.accept(this, argu);
      temp.isreq=1;
      Arginfo abc=n.f1.accept(this, temp);
      temp.isreq=0;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, temp);
      n.f9.accept(this, argu);
      Arginfo expret=n.f10.accept(this, temp);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      //if(abc==null) System.exit(0);
      if(!abc.str.equals(new String("boolean"))&&!abc.str.equals(new String("integer"))&&!abc.str.equals(new String("intarray"))){
    	  int flag=0;
    	  Iterator it = finaltable.symboltable.entrySet().iterator();
			while (it.hasNext()){
				Map.Entry pair = (Map.Entry)it.next();
				String cname=(String) pair.getKey();
				if(cname.equals(abc.str)){
					flag=1;
					break;
				}
			}
			if(flag==0){
				//System.out.println(abc.str);
				exitfunc(0,112);
			}
      }
      
      if(!expret.str.equals(finaltable.symboltable.get(temp.classname).funcdec.get(temp.methodname).get(0))){
    	  
    	  if(finaltable.symboltable.containsKey(expret.str)){
    		  //String name=vartype;
    		  int x=0;
			  int itr2=400;
    		  String vartype=expret.str;
    		  String tempstr=finaltable.symboltable.get(temp.classname).funcdec.get(temp.methodname).get(0);
    		  while(true){
    			  itr2--;
    			  //if(itr2==0) break;
    			  if(vartype.equals(tempstr)){
    				  x=1;
    				  break;
    			  }
    			  else{
    				  vartype=finaltable.symboltable.get(vartype).parent;
    				  if(vartype==null) break;
    			  }
    		  }
    		  if(x==0){
    			  exitfunc(1,222);
    		  }
    	 }
		 else{
			 exitfunc(1,20);
		 }
    	  //System.out.println(expret.str+"  "+n.f2.f0.tokenImage);
    	  
      }
      
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public Arginfo visit(FormalParameterList n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public Arginfo visit(FormalParameter n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public Arginfo visit(FormalParameterRest n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public Arginfo visit(Type n, Arginfo argu) {
      Arginfo _ret=null;
      Arginfo temp=n.f0.accept(this, argu);
      return temp;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public Arginfo visit(ArrayType n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Arginfo temp=new Arginfo();
      temp.str="intarray";
      return temp;
   }

   /**
    * f0 -> "boolean"
    */
   public Arginfo visit(BooleanType n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp=new Arginfo();
      temp.str="boolean";
      return temp;
   }

   /**
    * f0 -> "int"
    */
   public Arginfo visit(IntegerType n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp=new Arginfo();
      temp.str="integer";
      return temp;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public Arginfo visit(Statement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public Arginfo visit(Block n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public Arginfo visit(AssignmentStatement n, Arginfo argu) {
      Arginfo _ret=null;
      
      String vartype=new String("");
      
      Table classdec=finaltable.symboltable.get(argu.classname);
      HashMap<String,String> metvars=classdec.methodvars.get(argu.methodname);
      HashMap<String,String> classvars=classdec.varmap;
      int itr=400;
      while(classdec!=null){
    	  itr--;
	      //if(itr==0) break;
	      if(metvars.containsKey(n.f0.f0.tokenImage)){
	    	  vartype=metvars.get(n.f0.f0.tokenImage);
	      }
	      else if(classvars.containsKey(n.f0.f0.tokenImage)){
	    	  vartype=classvars.get(n.f0.f0.tokenImage);
	      }
	      if(vartype.length()==0){
	    	  String classname=classdec.parent;
	    	  if(classname==null) break;
	    	  classdec=finaltable.symboltable.get(classname);
	    	  classvars=classdec.varmap;
	      }
	      else{
	    	  break;
	      }
      }
      if(vartype.length()==0){
    	  exitfunc(0,0);
      }
      argu.isreq=1;
      Arginfo temp1=n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      Arginfo temp=n.f2.accept(this, argu);
      argu.isreq=1;
      n.f3.accept(this, argu);
      
//      if(temp==null){
//    	  System.out.println(vartype+"  "+n.f0.f0.tokenImage+"  "+argu.classname+"  "+argu.methodname);
//    	  exitfunc(1,0);
//      }
      vartype=temp.str;
      if(!vartype.equals(temp1.str)){
    	  //System.out.println(vartype+vartype.length());
    	  //System.out.println(temp.str+temp.str.length());
    	  //if(vartype==temp.str) System.out.println("njdnd");
    	  int x=0;
    	  if(finaltable.symboltable.containsKey(vartype)){
    		  String name=vartype;
    		  int itr2=400;
    		  
    		  while(true){
    			  itr2--;
    			  //if(itr2==0) break;
    			  if(vartype.equals(temp1.str)){
    				  x=1;
    				  break;
    			  }
    			  else{
    				  vartype=finaltable.symboltable.get(vartype).parent;
    			  }
    		  }
    	  }
    	  else if(x==0){
    		  exitfunc(1,33);
    	  }
    	  
      }
      
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public Arginfo visit(ArrayAssignmentStatement n, Arginfo argu) {
      Arginfo _ret=null;
      
      String vartype=new String("");
      
      Table classdec=finaltable.symboltable.get(argu.classname);
      HashMap<String,String> metvars=classdec.methodvars.get(argu.methodname);
      HashMap<String,String> classvars=classdec.varmap;
      
      if(metvars.containsKey(n.f0.f0.tokenImage)){
    	  vartype=metvars.get(n.f0.f0.tokenImage);
      }
      else if(classvars.containsKey(n.f0.f0.tokenImage)){
    	  vartype=classvars.get(n.f0.f0.tokenImage);
      }
      else{
    	  exitfunc(0,1);
      }
      
      if(!vartype.equals(new String("intarray"))){
    	  exitfunc(1,1);
      }
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp1=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      Arginfo temp2=n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      
      if(!(temp1.str.equals(new String("integer")))||!(temp2.str.equals(new String("integer")))){
    	  exitfunc(1,2);
      }
      
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public Arginfo visit(IfStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public Arginfo visit(IfthenStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp1=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      if(!(temp1.str.equals(new String("boolean")))){
    	  exitfunc(1,3);
      }
      
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public Arginfo visit(IfthenElseStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp1=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      
      if(!(temp1.str.equals(new String("boolean")))){
    	  exitfunc(1,4);
      }
      
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public Arginfo visit(WhileStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp1=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      if(!(temp1.str.equals(new String("boolean")))){
    	  exitfunc(1,5);
      }
      
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public Arginfo visit(PrintStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp1=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      if(!(temp1.str.equals(new String("integer")))){
    	  exitfunc(1,6);
      }
      
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public Arginfo visit(Expression n, Arginfo argu) {
      Arginfo _ret=null;
      Arginfo temp1=n.f0.accept(this, argu);
      return temp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(AndExpression n, Arginfo argu) {
      Arginfo _ret=null;
      Arginfo temp1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp2=n.f2.accept(this, argu);
      
      if(!temp1.str.equals(new String("boolean"))||!temp2.str.equals(new String("boolean"))){
    	  exitfunc(1,10);
      }
      
      
      return temp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(OrExpression n, Arginfo argu) {
      Arginfo _ret=null;
      
      
      Arginfo temp1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp2=n.f2.accept(this, argu);
      
      if(!temp1.str.equals(new String("boolean"))||!temp2.str.equals(new String("boolean"))){
    	  exitfunc(1,7);
      }
      
      return temp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(CompareExpression n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isreq=2;
      Arginfo temp1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp2=n.f2.accept(this, argu);
      
      if(!temp1.str.equals(new String("integer"))||!temp2.str.equals(new String("integer"))){
    	  //System.out.println(temp1.str+"rrc"+temp2.str);
    	  exitfunc(1,8);
      }
      temp1.str=new String("boolean");
      return temp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(neqExpression n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isreq=2;
      Arginfo temp1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp2=n.f2.accept(this, argu);
      
      if((temp1.str.equals(new String("integer"))&&temp2.str.equals(new String("integer")))||(temp1.str.equals(new String("boolean"))&&temp2.str.equals(new String("boolean")))){
    	  //exitfunc(1,8);
      }
      else{
    	  exitfunc(1,9);
      } 
      
      temp1.str=new String("boolean");
      return temp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(PlusExpression n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isreq=2;
      Arginfo temp1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp2= n.f2.accept(this, argu);
      
      if(!temp1.str.equals(new String("integer"))||!temp2.str.equals(new String("integer"))){
    	  exitfunc(1,11);
      }
      
      return temp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(MinusExpression n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isreq=2;
      Arginfo temp1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp2=n.f2.accept(this, argu);
      
      if(!temp1.str.equals(new String("integer"))||!temp2.str.equals(new String("integer"))){
    	  exitfunc(1,12);
      }
      
      return temp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(TimesExpression n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isreq=2;
      Arginfo temp1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp2=n.f2.accept(this, argu);
      
      if(!temp1.str.equals(new String("integer"))||!temp2.str.equals(new String("integer"))){
    	  exitfunc(1,13);
      }
      
      return temp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(DivExpression n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isreq=2;
      Arginfo temp1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp2=n.f2.accept(this, argu);
      
      if(!temp1.str.equals(new String("integer"))||!temp2.str.equals(new String("integer"))){
    	  exitfunc(1,14);
      }
      
      return temp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public Arginfo visit(ArrayLookup n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isreq=2;
      Arginfo temp1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Arginfo temp2=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      if(!temp1.str.equals(new String("intarray"))||!temp2.str.equals(new String("integer"))){
    	  exitfunc(1,15);
      }
      
      return temp2;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public Arginfo visit(ArrayLength n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isreq=2;
      Arginfo temp1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      if(!temp1.str.equals(new String("intarray"))){
    	  exitfunc(1,16);
      }
      
      temp1.str=new String("integer");
      return temp1;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public Arginfo visit(MessageSend n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isreq=1;
      Arginfo temp1=n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      argu.isreq=0;
      n.f2.accept(this, argu);
      argu.isreq=0;
      n.f3.accept(this, argu);
      Arginfo tempp=n.f4.accept(this, argu);
      
//      String classname5=temp1.str;
//      String methodname2=n.f2.f0.tokenImage;
//      temp1.str=finaltable.symboltable.get(classname5).funcdec.get(methodname2).get(0);
//      if(true) return temp1;
      
      if(tempp==null){
    	  //System.out.println(n.f2.f0.tokenImage);
    	  //exitfunc(1,119);
    	  tempp=new Arginfo();
      }
      n.f5.accept(this, argu);
      
      String classname=temp1.str;
      if(!finaltable.symboltable.containsKey(classname)){
    	  exitfunc(0,12);
      }
      String methodname=n.f2.f0.tokenImage;
      int itr=400;
      while(true){
    	  itr--;
    	  //if(itr==0) break;
    	  if(finaltable.symboltable.get(classname).funcdec.containsKey(methodname)){
    		  break;
    	  }
    	  else{
    		  classname=finaltable.symboltable.get(classname).parent;
    		  if(classname==temp1.str||classname==null) break;
    	  }
      }
      //System.out.println(classname+"djk"+methodname);
      //exitfunc(1,10);
      int flag=0;
      if(classname!=null&&finaltable.symboltable.containsKey(classname)){
    	  //System.out.println("cdjf");
    	  if(!finaltable.symboltable.get(classname).funcdec.containsKey(methodname)) exitfunc(0,21);
    	  if(finaltable.symboltable.get(classname).funcdec.containsKey(methodname)){
    		  
    		  Vector<String> target=finaltable.symboltable.get(classname).funcdec.get(methodname);
    		  //if(tempp==null) exitfunc(1,119);
    		  if(tempp.vecstr.size()+1==target.size()){
    			  int num=tempp.vecstr.size();
    			  for(int i=0;i<num;i++){
    				  if(!(tempp.vecstr.get(i)).equals(target.get(i+1))){
    					  flag=1;
    					  String classname2=tempp.vecstr.get(i);
    					  String ori=classname2;
    					  String classname3=target.get(i+1);
    					  int itr2=400;
    					  while(true){
    						  itr2--;
    						  if(itr2==0) break;
    						  if(finaltable.symboltable.containsKey(classname2)){
    							  if(classname3.equals(classname2)){
    								  flag=0;
    								  break;
    							  }
    							  else{
    								  classname2=finaltable.symboltable.get(classname2).parent;
    								  if(classname2==null||classname2.equals(ori)){
    									  flag=1;
    									  break;
    								  }
    							  }
    						  }
    					  }
    					  if(flag==1){
    						  break;
    					  }
    				  }
    			  }
    		  }
    		  else{
    			  flag=2;
    		  }
    		  if(flag==0) temp1.str=finaltable.symboltable.get(classname).funcdec.get(methodname).get(0);
    		  else{
//    			  System.out.println(classname+"   "+methodname+"   "+flag+"  "+argu.classname+"  "+argu.methodname);
//    			  System.out.println(tempp.vecstr.size());
//    			  System.out.println(target.size());
//    			  for(int i=0;i<tempp.vecstr.size();i++){
//    				  System.out.println(tempp.vecstr.get(i));
//    			  }
    			  exitfunc(1,122);
    		  }
    	  }
      }
      else{
    	  
    	  exitfunc(0,10);
      }
      
      return temp1;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public Arginfo visit(ExpressionList n, Arginfo argu) {
      Arginfo _ret=null;
      Arginfo temp=n.f0.accept(this, argu);
      Arginfo pre=new Arginfo();
      pre.vecstr.add(temp.str);
      pre.classname=argu.classname;
      pre.methodname=argu.methodname;
      pre.isreq=argu.isreq;
      n.f1.accept(this, pre);
      
      return pre;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public Arginfo visit(ExpressionRest n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp=n.f1.accept(this, argu);
      argu.vecstr.add(temp.str);
      return argu;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public Arginfo visit(PrimaryExpression n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isreq=1;
      Arginfo temp1=n.f0.accept(this, argu);
      return temp1;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public Arginfo visit(IntegerLiteral n, Arginfo argu) {
      Arginfo _ret=null;
      
      n.f0.accept(this, argu);
      
      Arginfo temp1=new Arginfo();
      temp1.str=new String("integer");
      return temp1;
   }

   /**
    * f0 -> "true"
    */
   public Arginfo visit(TrueLiteral n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      
      
      Arginfo temp1=new Arginfo();
      temp1.str=new String("boolean");
      return temp1;
   }

   /**
    * f0 -> "false"
    */
   public Arginfo visit(FalseLiteral n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      
      
      Arginfo temp1=new Arginfo();
      temp1.str=new String("boolean");
      return temp1;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public Arginfo visit(Identifier n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
//      String a="int";
//      if(a.equals(n.f0.tokenImage)){
//    	  System.out.println(argu.isreq);
//    	  System.exit(0);
//      }
      if(argu.isreq==0){
    	  
//    	  System.out.println(n.f0.tokenImage);
//    	  if(abcd==10) System.exit(0);
//    	  abcd++;
    	  return _ret;
      }
      if(argu.isreq==10){
    	  //exitfunc(1,90);
    	  Arginfo temp2=new Arginfo();
    	  temp2.str=n.f0.tokenImage;
    	  return temp2;
      }
      Arginfo temp1=new Arginfo();
      
      String vartype=new String("");
      //System.out.println(argu.classname+"\t"+argu.methodname+"\t"+n.f0.tokenImage);
      //exitfunc(1,90);
//      if(finaltable.containsKey(argu.classname)){
//    	  vartype=metvars.get(n.f0.tokenImage);
//      }
      //System.out.println(argu.classname);
      
      //System.out.println(argu.methodname);
//      if(!classdec.methodvars.containsKey(argu.methodname)&&((argu.classname).equals(new String("MyVisitor")))){
//    	  System.out.println("noo"+argu.methodname);
//    	  Iterator it2 = classdec.methodvars.entrySet().iterator();
//			while (it2.hasNext()) {
//		  		 Map.Entry pair2 = (Map.Entry)it2.next();
//		  		 System.out.print("\tfunction Name: ");
//		  		 System.out.format("%-15s",pair2.getKey());
//			}
//    	  exitfunc(1,20);
//      }
      
      
//      Iterator it = metvars.entrySet().iterator();
//		while (it.hasNext()) {
//			Map.Entry pair = (Map.Entry)it.next();
//			System.out.println(pair.getKey()+"*****************"+pair.getValue());
//			it.remove();
//		}
//		System.out.println((n.f0.tokenImage));
//      
      //if(metvars==null)exitfunc(0,20);
      //if(finaltable.symboltable.get(argu.classname).methodvars.get(argu.methodname).containsKey(n.f0.tokenImage)){
      
      Table classdec=finaltable.symboltable.get(argu.classname);
      HashMap<String,String> metvars=new HashMap<String,String>();
      metvars=classdec.methodvars.get(argu.methodname);
      HashMap<String,String> classvars=classdec.varmap;
      String classname=argu.classname;
      int itr=400;
      while(true){
    	  itr--;
    	  //if(itr==0) break;
    	  if(metvars.containsKey(n.f0.tokenImage)){
        	  vartype=metvars.get(n.f0.tokenImage);
        	  break;
          }
          else if(classvars.containsKey(n.f0.tokenImage)){
        	  vartype=classvars.get(n.f0.tokenImage);
        	  break;
          }
          else if(finaltable.symboltable.get(classname).parent!=null){
        	  classname=finaltable.symboltable.get(classname).parent;
        	  classvars=finaltable.symboltable.get(classname).varmap;
        	  if(classname.equals(argu.classname)){
        		  exitfunc(1,21);
        	  }
          }
          else{
        	  break;
          }
      }
      
//      else if(finaltable.symboltable.containsKey(n.f0.tokenImage)){
//    	  //exitfunc(0,20);
//    	  vartype=n.f0.tokenImage;
//      }
      if(vartype.length()==0){
    	  //System.out.println(argu.classname+"  "+argu.methodname+"  "+n.f0.tokenImage);
    	  if(finaltable.symboltable.containsKey(n.f0.tokenImage)){
    		  vartype=n.f0.tokenImage;
    		  
    	  }
    	  else{
    		  exitfunc(0,20);
    	  }
      }
      
      temp1.str=vartype;
      
      //System.out.println(classname);
      
      //temp1.str="identifier";
      //temp1.classname=n.f0.tokenImage;
      return temp1;
   }

   /**
    * f0 -> "this"
    */
   public Arginfo visit(ThisExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      
      
      Arginfo temp1=new Arginfo();
      temp1.str=argu.classname;
      //temp1.str="identifier";
      temp1.classname=argu.classname;
      return temp1;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public Arginfo visit(ArrayAllocationExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Arginfo temp1=n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      if(!temp1.str.equals(new String("integer"))){
    	  exitfunc(1,16);
      }
      temp1.str=new String("intarray");
      return temp1;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public Arginfo visit(AllocationExpression n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isreq=0;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      Arginfo temp1=new Arginfo();
      //temp1.str="identifier";
      temp1.str=n.f1.f0.tokenImage;
      return temp1;
      
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public Arginfo visit(NotExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp1=n.f1.accept(this, argu);
      
      if(!temp1.str.equals(new String("boolean"))){
    	  exitfunc(1,17);
      }
      
      return temp1;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public Arginfo visit(BracketExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp1=n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return temp1;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public Arginfo visit(IdentifierList n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public Arginfo visit(IdentifierRest n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
