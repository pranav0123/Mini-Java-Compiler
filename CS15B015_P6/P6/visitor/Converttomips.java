//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Converttomips extends GJDepthFirst<Arginfo,Arginfo>{
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public Arginfo visit(NodeList n, Arginfo argu) {
      Arginfo _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Arginfo visit(NodeListOptional n, Arginfo argu) {
      if ( n.present() ) {
         Arginfo _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public Arginfo visit(NodeOptional n, Arginfo argu) {
	   if ( n.present() ){
	       //System.err.println(argu.omg);  
		   return n.node.accept(this,argu);
	   }
      else
         return null;
   }

   public Arginfo visit(NodeSequence n, Arginfo argu) {
      Arginfo _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Arginfo visit(NodeToken n, Arginfo argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public Arginfo visit(Goal n, Arginfo argu) {
      Arginfo _ret=null;
      
      System.out.println("\t\t.text");
      System.out.println("\t\t.globl\t\tmain");
      System.out.println("main:\n");
      int a=Integer.valueOf(n.f5.f0.tokenImage);
      int b=Integer.valueOf(n.f8.f0.tokenImage);
      argu.a=Integer.valueOf(n.f2.f0.tokenImage);
      argu.b=Integer.valueOf(n.f5.f0.tokenImage);
      argu.c=Integer.valueOf(n.f8.f0.tokenImage);
      System.out.println("\t\t\tmove $fp, $sp");
      int temp=4*(3+a+Math.max(b-4,0)-1);
      System.out.println("\t\t\tsubu $sp, $sp, "+temp);
      System.out.println("\t\t\tsw $ra, -4($fp)");
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      
      System.out.println("\t\t\tlw $ra, -4($fp)");
      System.out.println("\t\t\taddu $sp, $sp, "+temp);
      System.out.println("\t\t\tj $ra");
      
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      
      System.out.println("\t\t\t.text");
      System.out.println("\t\t\t.globl _halloc");
      System.out.println("_halloc:");
      System.out.println("\t\t\tli $v0, 9");
      System.out.println("syscall");
      System.out.println("\t\t\tj $ra");
      
      System.out.println("\t\t\t.text");
      System.out.println("\t\t\t.globl _print");
      System.out.println("_print:");
      System.out.println("\t\t\tli $v0, 1");
      System.out.println("syscall");
      System.out.println("\t\t\tla $a0, newl");
      System.out.println("\t\t\tli $v0, 4");
      System.out.println("syscall");
      System.out.println("\t\t\tj $ra");
      
      System.out.println("\t\t\t.data");
      System.out.println("\t\t\t.align\t0");
      System.out.println("newl: \t.asciiz \"\\n\"");
      System.out.println("\t\t\t.align\t0");
      System.out.println("str_er:\t.asciiz \" ERROR: abnormal termination\\n\"");
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public Arginfo visit(StmtList n, Arginfo argu) {
      Arginfo _ret=null;
      argu.omg=1;
      //System.err.println(argu.omg);
      n.f0.accept(this, argu);
      //argu.omg=0;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public Arginfo visit(Procedure n, Arginfo argu) {
      Arginfo _ret=null;
      
      System.out.println("\t\t\t.text");
      System.out.println("\t\t\t.globl           "+n.f0.f0.tokenImage);
      System.out.println(n.f0.f0.tokenImage+":");
      
      int a=Integer.valueOf(n.f5.f0.tokenImage);
      int b=Integer.valueOf(n.f8.f0.tokenImage);
      argu.a=Integer.valueOf(n.f2.f0.tokenImage);
      argu.b=Integer.valueOf(n.f5.f0.tokenImage);
      argu.c=Integer.valueOf(n.f8.f0.tokenImage);
      System.out.println("\t\t\tsw $fp, -8($sp)");
      System.out.println("\t\t\tmove $fp, $sp");
      int temp=4*(3+a+Math.max(b-4,0)-1);
      System.out.println("\t\t\tsubu $sp, $sp, "+temp);
      System.out.println("\t\t\tsw $ra, -4($fp)");
      argu.omg=0;
      n.f0.accept(this, argu);
      argu.omg=1;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      
      System.out.println("\t\t\tlw $ra, -4($fp)");
      System.out.println("\t\t\tlw $fp, "+(temp-8)+"($sp)");
      System.out.println("\t\t\taddu $sp, $sp, "+temp);
      System.out.println("\t\t\tj $ra");
      
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public Arginfo visit(Stmt n, Arginfo argu) {
      Arginfo _ret=null;
      //argu.omg=0;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public Arginfo visit(NoOpStmt n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\t\t\tnop\n");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public Arginfo visit(ErrorStmt n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      System.out.println("\t\t\tli $v0 4");
      System.out.println("\t\t\tla $a0, str_er");
      System.out.println("\t\t\tsyscall");
      System.out.println("\t\t\tli $v0, 10");
      System.out.println("\t\t\tsyscall");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public Arginfo visit(CJumpStmt n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp=n.f1.accept(this, argu);
      argu.omg=0;
      n.f2.accept(this, argu);
      argu.omg=1;
      System.out.println("\t\t\tbeqz $"+temp.regname+" "+n.f2.f0.tokenImage);
      
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public Arginfo visit(JumpStmt n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      argu.omg=0;
      n.f1.accept(this, argu);
      argu.omg=1;
      System.out.println("\t\t\tb "+n.f1.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public Arginfo visit(HStoreStmt n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp1=n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Arginfo temp2=n.f3.accept(this, argu);
      
      System.out.println("\t\t\tsw $"+temp2.regname+", "+n.f2.f0.tokenImage+"($"+temp1.regname+")");
      
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public Arginfo visit(HLoadStmt n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp1=n.f1.accept(this, argu);
      Arginfo temp2=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      System.out.println("lw $"+temp1.regname+", "+n.f3.f0.tokenImage+"($"+temp2.regname+")");
      
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public Arginfo visit(MoveStmt n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp=n.f1.accept(this, argu);
      argu.movreg=temp.regname;
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public Arginfo visit(PrintStmt n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp=n.f1.accept(this, argu);
      if(temp.simpleexptype==0){
    	  System.out.print("\t\t\tmove $a0 $");
      }
      if(temp.simpleexptype==1){
    	  System.out.print("\t\t\tli $a0 ");
      }
      if(temp.simpleexptype==2){
    	  System.out.print("\t\t\tla $a0 ");
      }
      System.out.println(temp.simpleexpstring);
      System.out.println("\t\t\tjal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public Arginfo visit(ALoadStmt n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp=n.f1.accept(this, argu);
      Arginfo temp1=n.f2.accept(this, argu);
      
      System.out.println("lw $"+temp.regname+", "+temp1.spilledarg);
      
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public Arginfo visit(AStoreStmt n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp1=n.f1.accept(this, argu);
      Arginfo temp2=n.f2.accept(this, argu);
      System.out.println("sw $"+temp2.regname+", "+temp1.spilledarg);
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public Arginfo visit(PassArgStmt n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp1=n.f1.accept(this, argu);
      Arginfo temp2=n.f2.accept(this, argu);
      int temp3=Integer.valueOf(n.f1.f0.tokenImage);
      System.out.println("sw $"+temp2.regname+", "+((temp3-1)*4)+"($sp)\n");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public Arginfo visit(CallStmt n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp=n.f1.accept(this, argu);
      if(temp.simpleexptype==0){
    	  System.out.println("\t\t\tjalr $"+temp.simpleexpstring);
      }
      if(temp.simpleexptype==2){
    	  System.out.println("\t\t\tjal "+temp.simpleexpstring);
      }
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public Arginfo visit(Exp n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isexp=1;
      n.f0.accept(this, argu);
      argu.isexp=0;
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public Arginfo visit(HAllocate n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp=n.f1.accept(this, argu);
      if(temp.simpleexptype==0){
    	  System.out.println("\t\t\tmove $a0 $"+temp.simpleexpstring);	  
      }
      if(temp.simpleexptype==1){
    	  System.out.println("\t\t\tli $a0 $"+temp.simpleexpstring);
      }
      System.out.println("\t\t\tjal _halloc");
	  System.out.println("\t\t\tmove $"+argu.movreg+" $v0");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public Arginfo visit(BinOp n, Arginfo argu) {
      Arginfo _ret=null;
      Arginfo temp0=n.f0.accept(this, argu);
      Arginfo temp1=n.f1.accept(this, argu);
      argu.isbinop=1;
      Arginfo temp2=n.f2.accept(this, argu);
      argu.isbinop=0;
      System.out.print("\t\t\t"+temp0.opstr+" $"+argu.movreg+", $"+temp1.regname+", ");
      if(temp2.simpleexptype==0){
    	  System.out.print("$");
      }
      System.out.println(temp2.simpleexpstring);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public Arginfo visit(Operator n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo ret=new Arginfo("");
      if(n.f0.which==0){
    	  ret.opstr="sle";
      }
      if(n.f0.which==1){
    	  ret.opstr="sne";
      }
      if(n.f0.which==2){
    	  ret.opstr="add";
      }
      if(n.f0.which==3){
    	  ret.opstr="sub";
      }
      if(n.f0.which==4){
    	  ret.opstr="mul";
      }
      if(n.f0.which==5){
    	  ret.opstr="div";
      }
      return ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public Arginfo visit(SpilledArg n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      int num=Integer.valueOf(n.f1.f0.tokenImage);
      Arginfo ret=new Arginfo("");
      if(argu.a>4&&num<(argu.a-4)){
    	  ret.spilledarg=(" "+num*4+"($fp) ");
      }
      else{
    	  if(argu.a>4){
    		num-=(argu.a-4);  
    	  }
    	  if(argu.c>4){
    		  num+=(argu.c-4);
    	  }
    	  ret.spilledarg=(" "+num*4+"($sp) ");
      }
      return ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public Arginfo visit(SimpleExp n, Arginfo argu) {
      Arginfo _ret=null;
      argu.omg=0;
      Arginfo temp=n.f0.accept(this, argu);
      argu.omg=1;
      Arginfo ret=new Arginfo("");
      ret.simpleexptype=n.f0.which;
      if(argu.isexp==1&&argu.isbinop==0){
    	  if(n.f0.which==0){
    		  System.out.println("\t\t\tmove $"+argu.movreg+" $"+temp.regname);
          }
          if(n.f0.which==1){
        	  System.out.println("\t\t\tli $"+argu.movreg+" "+temp.simpleexpstring);
          }
          if(n.f0.which==2){
        	  System.out.println("\t\t\tla $"+argu.movreg+" "+temp.simpleexpstring);
          }
      }
      if(n.f0.which==0){
    	  ret.simpleexpstring=temp.regname;
      }
      if(n.f0.which==1){
    	  ret.simpleexpstring=temp.simpleexpstring;
      }
      if(n.f0.which==2){
    	  ret.simpleexpstring=temp.simpleexpstring;
      }
      return ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public Arginfo visit(Reg n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo ret=new Arginfo("");
      if(n.f0.which==0){
    	  ret.regname="a0";
      }
      if(n.f0.which==1){
    	  ret.regname="a1";
      }
      if(n.f0.which==2){
    	  ret.regname="a2";
      }
      if(n.f0.which==3){
    	  ret.regname="a3";
      }
      if(n.f0.which==4){
    	  ret.regname="t0";
      }
      if(n.f0.which==5){
    	  ret.regname="t1";
      }
      if(n.f0.which==6){
    	  ret.regname="t2";
      }
      if(n.f0.which==7){
    	  ret.regname="t3";
      }
      if(n.f0.which==8){
    	  ret.regname="t4";
      }
      if(n.f0.which==9){
    	  ret.regname="t5";
      }
      if(n.f0.which==10){
    	  ret.regname="t6";
      }
      if(n.f0.which==11){
    	  ret.regname="t7";
      }
      if(n.f0.which==12){
    	  ret.regname="s0";
      }
      if(n.f0.which==13){
    	  ret.regname="s1";
      }
      if(n.f0.which==14){
    	  ret.regname="s2";
      }
      if(n.f0.which==15){
    	  ret.regname="s3";
      }
      if(n.f0.which==16){
    	  ret.regname="s4";
      }
      if(n.f0.which==17){
    	  ret.regname="s5";
      }
      if(n.f0.which==18){
    	  ret.regname="s6";
      }
      if(n.f0.which==19){
    	  ret.regname="s7";
      }
      if(n.f0.which==20){
    	  ret.regname="t8";
      }
      if(n.f0.which==21){
    	  ret.regname="t9";
      }
      if(n.f0.which==22){
    	  ret.regname="v0";
      }
      if(n.f0.which==23){
    	  ret.regname="v1";
      }
      return ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public Arginfo visit(IntegerLiteral n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo ret=new Arginfo("");
      ret.simpleexpstring=(n.f0.tokenImage);
      return ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public Arginfo visit(Label n, Arginfo argu) {
      Arginfo _ret=null;
      if(argu.omg==1){
    	  //System.err.println(n.f0.tokenImage+":");
    	  System.out.println(n.f0.tokenImage+":"); 
      }
      //System.err.println(argu.omg);
      n.f0.accept(this, argu);
      Arginfo ret=new Arginfo("");
      ret.simpleexpstring=(n.f0.tokenImage);
      return ret;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public Arginfo visit(SpillInfo n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public Arginfo visit(SpillStatus n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
