//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ConvertVisitor1 extends GJDepthFirst<Arginfo,Arginfo> {
	
	public void exitfunc(int type,int num) {
		
		if(type==0){
			System.out.print("Symbol not found");
		}
		else{
			System.out.print("Type error");
		}
		System.exit(1);
	 }
	
	//My global map
	public Arginfo finaltable=new Arginfo();
	
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public Arginfo visit(NodeList n, Arginfo argu) {
      Arginfo _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Arginfo visit(NodeListOptional n, Arginfo argu) {
      if ( n.present() ) {
         Arginfo _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public Arginfo visit(NodeOptional n, Arginfo argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public Arginfo visit(NodeSequence n, Arginfo argu) {
      Arginfo _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Arginfo visit(NodeToken n, Arginfo argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public Arginfo visit(Goal n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return finaltable;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public Arginfo visit(MainClass n, Arginfo argu) {
      Arginfo _ret=null;
      
      Table T=new Table();
      if(!finaltable.symboltable.containsKey(n.f1.f0.tokenImage)) finaltable.symboltable.put(n.f1.f0.tokenImage,T);
      else exitfunc(1,0);
      String name=n.f11.f0.tokenImage;
      //Arginfo temp=new Arginfo(n.f1.f0.tokenImage);
      if(!finaltable.symboltable.get(n.f1.f0.tokenImage).varmap.containsKey(name)){
    	  finaltable.symboltable.get(n.f1.f0.tokenImage).varmap.put(name,"stringarray");
      }
      else{
    	  exitfunc(1,0);
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public Arginfo visit(TypeDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public Arginfo visit(ClassDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      
      Arginfo temp=new Arginfo(n.f1.f0.tokenImage);
      
      if(!finaltable.symboltable.containsKey(n.f1.f0.tokenImage)){
    	  finaltable.symboltable.put(n.f1.f0.tokenImage,new Table());
      }
      else{
    	  exitfunc(1,0);
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, temp);
      n.f4.accept(this, temp);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public Arginfo visit(ClassExtendsDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      
      Arginfo temp=new Arginfo(n.f1.f0.tokenImage);
      if(!finaltable.symboltable.containsKey(n.f1.f0.tokenImage)){
    	  finaltable.symboltable.put(n.f1.f0.tokenImage,new Table());
      }
      else{
    	  exitfunc(1,0);
      }
      finaltable.symboltable.get(n.f1.f0.tokenImage).parent=(n.f3.f0.tokenImage);
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, temp);
      n.f6.accept(this, temp);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public Arginfo visit(VarDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      
      
      Arginfo temp= n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      
      if(argu.methodname.length()==0){
    	  if(!finaltable.symboltable.get(argu.classname).varmap.containsKey(n.f1.f0.tokenImage)){
    		  finaltable.symboltable.get(argu.classname).varmap.put(n.f1.f0.tokenImage,temp.str);
    	  }
    	  else{
    		  exitfunc(1,0);
    	  }
      }
      else{
    	  if(!(finaltable.symboltable.get(argu.classname).methodvars.get(argu.methodname)).containsKey(n.f1.f0.tokenImage)){
    		  (finaltable.symboltable.get(argu.classname).methodvars.get(argu.methodname)).put(n.f1.f0.tokenImage,temp.str);
    	  }
    	  else{
    		  exitfunc(1,0);
    	  }
      }
      
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public Arginfo visit(MethodDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      
      Arginfo temp=new Arginfo();
      temp.classname=(temp.classname+argu.classname);
      temp.methodname=(temp.methodname+n.f2.f0.tokenImage);
      if(!finaltable.symboltable.get(argu.classname).funcdec.containsKey(n.f2.f0.tokenImage)){
    	  finaltable.symboltable.get(argu.classname).funcdec.put(n.f2.f0.tokenImage,new Vector<String>());
      }
      if(!finaltable.symboltable.get(argu.classname).funcdec2.containsKey(n.f2.f0.tokenImage)){
    	  finaltable.symboltable.get(argu.classname).funcdec2.put(n.f2.f0.tokenImage,new Vector<String>());
      }
      finaltable.symboltable.get(argu.classname).methodvars.put(temp.methodname,new HashMap<String,String>());
      
      n.f0.accept(this, argu);
      Arginfo temp2=n.f1.accept(this, argu);
      
      finaltable.symboltable.get(argu.classname).funcdec.get(n.f2.f0.tokenImage).add(temp2.str);
      
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, temp);
      
      //System.out.print(finaltable.symboltable.get(argu.classname).funcdec.get(temp.methodname).size());
      //System.exit(0);
      
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, temp);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      
      
      
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public Arginfo visit(FormalParameterList n, Arginfo argu) {
      Arginfo _ret=null;
      Arginfo temp=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      
      
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public Arginfo visit(FormalParameter n, Arginfo argu) {
      Arginfo _ret=null;
      Arginfo temp=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      if(!finaltable.symboltable.get(argu.classname).methodvars.get(argu.methodname).containsKey(n.f1.f0.tokenImage)){
    	  finaltable.symboltable.get(argu.classname).methodvars.get(argu.methodname).put(n.f1.f0.tokenImage,temp.str);
      }
      (finaltable.symboltable.get(argu.classname).funcdec.get(argu.methodname)).add(temp.str);
      (finaltable.symboltable.get(argu.classname).funcdec2.get(argu.methodname)).add(n.f1.f0.tokenImage);
      return temp;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public Arginfo visit(FormalParameterRest n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public Arginfo visit(Type n, Arginfo argu) {
      Arginfo _ret=null;
      Arginfo temp=n.f0.accept(this, argu);
      return temp;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public Arginfo visit(ArrayType n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Arginfo temp=new Arginfo();
      temp.str=new String("intarray");
      return temp;
   }

   /**
    * f0 -> "boolean"
    */
   public Arginfo visit(BooleanType n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp=new Arginfo();
      temp.str=new String("boolean");
      return temp;
   }

   /**
    * f0 -> "int"
    */
   public Arginfo visit(IntegerType n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp=new Arginfo();
      temp.str=new String("integer");
      return temp;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public Arginfo visit(Statement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public Arginfo visit(Block n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public Arginfo visit(AssignmentStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public Arginfo visit(ArrayAssignmentStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public Arginfo visit(IfStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public Arginfo visit(IfthenStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public Arginfo visit(IfthenElseStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public Arginfo visit(WhileStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public Arginfo visit(PrintStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public Arginfo visit(Expression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(AndExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(OrExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(CompareExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(neqExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(PlusExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(MinusExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(TimesExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(DivExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public Arginfo visit(ArrayLookup n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public Arginfo visit(ArrayLength n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public Arginfo visit(MessageSend n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public Arginfo visit(ExpressionList n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public Arginfo visit(ExpressionRest n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public Arginfo visit(PrimaryExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public Arginfo visit(IntegerLiteral n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public Arginfo visit(TrueLiteral n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public Arginfo visit(FalseLiteral n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public Arginfo visit(Identifier n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp=new Arginfo();
      temp.str=n.f0.tokenImage;
      return temp;
   }

   /**
    * f0 -> "this"
    */
   public Arginfo visit(ThisExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public Arginfo visit(ArrayAllocationExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public Arginfo visit(AllocationExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public Arginfo visit(NotExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public Arginfo visit(BracketExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public Arginfo visit(IdentifierList n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public Arginfo visit(IdentifierRest n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
