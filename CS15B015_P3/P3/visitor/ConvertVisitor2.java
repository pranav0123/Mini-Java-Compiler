//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class ConvertVisitor2 extends GJDepthFirst<Arginfo,Arginfo>{
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	public Arginfo finaltable=new Arginfo();
	public int prectr=1000; 
	public int labelctr=1; 
	public HashMap<String,Integer> globalmap=new HashMap<String,Integer>();
	Vector<String> vec;
	int abcd=0;
	
	public void exitfunc(int type,int num) {
		//assert(false);
		
		if(type==0){
			System.out.print("Symbol not found");
		}
		else{ 
			System.out.print("Type error");
		}
		System.exit(1);
	 }
	
	
   public Arginfo visit(NodeList n, Arginfo argu) {
      Arginfo _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Arginfo visit(NodeListOptional n, Arginfo argu) {
      if ( n.present() ) {
         Arginfo _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public Arginfo visit(NodeOptional n, Arginfo argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public Arginfo visit(NodeSequence n, Arginfo argu) {
      Arginfo _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public Arginfo visit(NodeToken n, Arginfo argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public Arginfo visit(Goal n, Arginfo argu) {
	   
	  finaltable=argu;
	  
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public Arginfo visit(MainClass n, Arginfo argu) {
	   
	  System.out.println("MAIN");
	  Arginfo temp=new Arginfo(n.f1.f0.tokenImage);
	  temp.methodname=new String("main");
	   
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, temp);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      
      System.out.println("\nEND\n\n\n\n\n");
      
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public Arginfo visit(TypeDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public Arginfo visit(ClassDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      
      Arginfo temp=new Arginfo(n.f1.f0.tokenImage);
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, temp);
      n.f4.accept(this, temp);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public Arginfo visit(ClassExtendsDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      
      Arginfo temp=new Arginfo(n.f1.f0.tokenImage);
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, temp);
      n.f6.accept(this, temp);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public Arginfo visit(VarDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      
      
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      if(!argu.methodname.equals("")){
    	  globalmap.put(n.f1.f0.tokenImage,prectr++);
      }
      
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public Arginfo visit(MethodDeclaration n, Arginfo argu) {
      Arginfo _ret=null;
      
      Arginfo temp=new Arginfo();
      temp.classname=(temp.classname+argu.classname);
      temp.methodname=(temp.methodname+n.f2.f0.tokenImage);
      
      
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this,temp);
      
      int num=finaltable.symboltable.get(temp.classname).funcdec.get(temp.methodname).size();
      System.out.println(temp.classname+"_"+temp.methodname+" ["+num+"]\nBEGIN ");
      Vector<String> funcdec2=finaltable.symboltable.get(temp.classname).funcdec2.get(temp.methodname);
      for(int i=0;i<funcdec2.size();i++){
    	  globalmap.put(funcdec2.get(i),i+1);
      }
      int a=prectr++;
      
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, temp);
      n.f8.accept(this, temp);
      n.f9.accept(this, argu);
      System.out.print("MOVE TEMP "+a+" ");
      n.f10.accept(this, temp);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      
      System.out.println(" NOOP\n RETURN TEMP "+a+"\nEND\n");
      globalmap.clear();
      
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public Arginfo visit(FormalParameterList n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public Arginfo visit(FormalParameter n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public Arginfo visit(FormalParameterRest n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public Arginfo visit(Type n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public Arginfo visit(ArrayType n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public Arginfo visit(BooleanType n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public Arginfo visit(IntegerType n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public Arginfo visit(Statement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public Arginfo visit(Block n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public Arginfo visit(AssignmentStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      
      String classname=argu.classname;
      String methodname=argu.methodname;
      String strtofind=n.f0.f0.tokenImage;
      if(globalmap.containsKey(strtofind)){
    	  System.out.print("\tMOVE TEMP "+globalmap.get(strtofind)+" ");
      }
      else{
    	  System.out.print("\tHSTORE TEMP 0 "+classpos(strtofind,classname)+" ");
      }
      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   	public int classpos(String strtofind, String classname) {
	// TODO Auto-generated method stub
   		String reqname=getclassname(strtofind,classname);
   		reqname=reqname+"_"+strtofind;
   		Table t=finaltable.symboltable.get(classname);
   		HashMap<String,String> varmap=t.varmap;
   		return t.varnum.get(reqname);
}

   	public String getclassname(String strtofind, String classname) {
		// TODO Auto-generated method stub
		if(classname==null){
			System.out.println("See assignment helper function getclassname");
			System.exit(1);
		}
		Table t=finaltable.symboltable.get(classname);
		if(t.varmap.containsKey(strtofind)){
			return classname;
		}
		else{
			return getclassname(strtofind,t.parent);
		}
	}

/**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public Arginfo visit(ArrayAssignmentStatement n, Arginfo argu) {
      Arginfo _ret=null;
      
      String classname=argu.classname;
      String methodname=argu.methodname;
      String strtofind=n.f0.f0.tokenImage;
      int a=prectr++;
      int b=prectr++;
      
      if(globalmap.containsKey(strtofind)){
    	  System.out.println("\tMOVE TEMP "+b+" "+globalmap.get(strtofind));
    	  System.out.println("\tMOVE TEMP "+a+" PLUS 4 TIMES 4 ");
      }
      else{
    	  
    	  System.out.println("\t\tHLOAD TEMP "+b+" TEMP 0 "+classpos(strtofind,classname));
    	  
    	  System.out.println("\tMOVE TEMP "+a+" PLUS 4 TIMES 4 ");
      }
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      System.out.print("\tMOVE TEMP "+a+" PLUS TEMP "+b+" TEMP "+a+" ");
      System.out.print("\tHSTORE TEMP "+a+" 0 ");
      
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      
      
      
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public Arginfo visit(IfStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public Arginfo visit(IfthenStatement n, Arginfo argu) {
      Arginfo _ret=null;
      
      System.out.print("CJUMP ");
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      int var=(labelctr++);
      System.out.println(" L"+var+" ");
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      System.out.println(" L"+var+" NOOP");
      
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public Arginfo visit(IfthenElseStatement n, Arginfo argu) {
      Arginfo _ret=null;
      
      System.out.print("CJUMP ");
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      int var1=(labelctr++);
      int var2=(labelctr++);
      int var3=(labelctr++);
      System.out.println(" L"+var2+" ");
      
      n.f3.accept(this, argu);
      
      System.out.println(" L"+var1+" NOOP");
      
      n.f4.accept(this, argu);
      
      System.out.println("JUMP L"+var3+" ");
      
      n.f5.accept(this, argu);
      
      System.out.println(" L"+var2+" NOOP");
      
      n.f6.accept(this, argu);
      
      System.out.println(" L"+var3+" NOOP");
      
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public Arginfo visit(WhileStatement n, Arginfo argu) {
      Arginfo _ret=null;
      
      int var1=labelctr++;
      int var2=labelctr++;
      System.out.println(" L"+var1+" NOOP");
      System.out.print("CJUMP ");
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      System.out.println(" L"+var2+" ");
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("JUMP L"+var1+"\nL"+var2+" NOOP\n");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public Arginfo visit(PrintStatement n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println("PRINT ");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public Arginfo visit(Expression n, Arginfo argu) {
      Arginfo _ret=null;
      Arginfo temp=n.f0.accept(this, argu);
      
      return temp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(AndExpression n, Arginfo argu) {
      Arginfo _ret=null;
      
      int num1=labelctr++;
      int num2=labelctr++;
      int var=prectr++;
      System.out.print("BEGIN\nCJUMP ");
      
      n.f0.accept(this, argu);
      
      System.out.println(" L"+num1+" ");
      System.out.print("CJUMP ");
      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      System.out.println(" L"+num1+" ");
      System.out.println("MOVE TEMP "+var+" 1\nJUMP L"+num2+" ");
      
      System.out.println(" L"+num1+" NOOP");
      System.out.println("MOVE TEMP "+var+" 0\nJUMP L"+num2+"\nL"+num2+"\nNOOP RETURN TEMP "+var+"\nEND\n");
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(OrExpression n, Arginfo argu) {
      Arginfo _ret=null;
      
      int num1=labelctr++;
      int num2=labelctr++;
      int num3=labelctr++;
      int num4=labelctr++;
      int var=prectr++;
      System.out.print("BEGIN\nCJUMP ");
      
      n.f0.accept(this, argu);
      
      System.out.println(" L"+num1+" ");
      System.out.println("JUMP L"+num2+"\nL"+num1+" NOOP\n");
      System.out.println("CJUMP ");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      System.out.println(" L"+num3+" ");
      
      System.out.println("L"+num2+"\nMOVE TEMP "+var+" 1\nJUMP L"+num4+" ");
      System.out.println("L"+num3+"\nMOVE TEMP "+var+" 0\nJUMP L"+num4+" ");
      System.out.println("L"+num4+" NOOP\n RETURN TEMP "+var);
      System.out.println("\nEND\n");
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(CompareExpression n, Arginfo argu) {
	   Arginfo _ret=null;
	      int num1=labelctr++;
	      int num2=labelctr++;
	      int var=prectr++;
	      System.out.println("BEGIN\n CJUMP LE ");
	      n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      
	      
	      System.out.println(" L"+num1+" ");
	      System.out.println("\nMOVE TEMP "+var+" 1\nJUMP L"+num2+" ");
	      System.out.println("L"+num1+"\nMOVE TEMP "+var+" 0\nJUMP L"+num2+" "+"L"+num2+"\nNOOP\nRETURN TEMP "+var+"\nEND\n");
	      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(neqExpression n, Arginfo argu) {
		  Arginfo _ret=null;
	      int num1=labelctr++;
	      int num2=labelctr++;
	      int var=prectr++;
	      System.out.println("BEGIN\n CJUMP NE ");
	      n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      
	      
	      System.out.println(" L"+num1);
	      System.out.println("\nMOVE TEMP "+var+" 1\nJUMP L"+num2+" ");
	      System.out.println("L"+num1+"\nMOVE TEMP "+var+" 0\nJUMP L"+num2+" "+"L"+num2+"\nNOOP\nRETURN TEMP "+var+"\nEND\n");
	      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(PlusExpression n, Arginfo argu) {
	   	  Arginfo _ret=null;
	      int num=labelctr++;
	      System.out.println("BEGIN\n NOOP\nRETURN PLUS ");
	      n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      
	      System.out.println("\nEND\n");
	      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(MinusExpression n, Arginfo argu) {
	   	  Arginfo _ret=null;
	      int num=labelctr++;
	      System.out.println("BEGIN\nNOOP\n RETURN MINUS ");
	      n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      
	      System.out.println("\nEND\n");
	      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(TimesExpression n, Arginfo argu) {
	   	  Arginfo _ret=null;
	      int num=labelctr++;
	      System.out.println("BEGIN\nNOOP\n RETURN TIMES ");
	      n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      
	      System.out.println("\nEND\n");
	      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public Arginfo visit(DivExpression n, Arginfo argu) {
	   	  Arginfo _ret=null;
	      int num=labelctr++;
	      System.out.println("BEGIN\nNOOP\n RETURN DIV ");
	      n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      
	      System.out.println("\nEND\n");
	      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public Arginfo visit(ArrayLookup n, Arginfo argu) {
      Arginfo _ret=null;
      
      int a=prectr++;
      int b=prectr++;
      int c=prectr++;
      int d=prectr++;
      System.out.println("BEGIN\nMOVE TEMP "+a+" ");
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      System.out.println("MOVE TEMP "+b+" ");
      
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      System.out.println("MOVE TEMP "+b+" TIMES 4 TEMP "+b);
      System.out.println("MOVE TEMP "+c+" PLUS TEMP "+a+" TEMP "+b);
      System.out.println("HLOAD TEMP "+d+" TEMP "+c+" 4 S");
      System.out.println("NOOP\nRETURN TEMP "+d+"\nEND\n");
      
      return _ret;
      
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public Arginfo visit(ArrayLength n, Arginfo argu) {
      Arginfo _ret=null;
      
      int a=prectr++;
      int b=prectr++;
      System.out.println("BEGIN\nMOVE TEMP "+a+" ");
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      System.out.println("HLOAD TEMP "+b+" TEMP "+a+" 0 ");
      System.out.println("NOOP\nRETURN TEMP "+b+"\nEND\n");
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public Arginfo visit(MessageSend n, Arginfo argu) {
      Arginfo _ret=null;
      
      int a=prectr++;
      int b=prectr++;
      int c=prectr++;
      int d=prectr++;
      int e=prectr++;
      
      System.out.println("BEGIN\n ");
      System.out.println("MOVE TEMP "+e+" CALL\n BEGIN MOVE TEMP "+a+" ");
      argu.isreq=1;
      Arginfo temp1=n.f0.accept(this, argu);
      argu.isreq=0;
      
      if(temp1==null){
    	  System.err.println("noo "+n.f2.f0.tokenImage+" "+argu.classname+" "+argu.methodname);
    	  System.exit(1);
      }
      String classname=temp1.str;
      String classname2=temp1.str;
      String methodname=n.f2.f0.tokenImage;
      while(true){
    	  if(finaltable.symboltable.get(classname).funcdec.containsKey(methodname)){
    		  break;
    	  }
    	  else{
    		  classname=finaltable.symboltable.get(classname).parent;
    		  if(classname==temp1.str||classname==null) break;
    	  }
      }
      String name=classname+"_"+methodname;
      //System.err.println(name+" "+);
      int dist=finaltable.symboltable.get(classname2).methodnum.get(name);
      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      System.out.println("HLOAD TEMP "+b+" TEMP "+a+" 0");
      System.out.println("HLOAD TEMP "+c+" TEMP "+b+" "+dist);
      System.out.println("RETURN TEMP "+c+"\nEND\n");
      System.out.println("( TEMP "+a+" ");
      
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      
      
      System.out.println(" )\n"+"RETURN TEMP "+e+"\nEND\n");

      
      temp1.str=finaltable.symboltable.get(classname).funcdec.get(methodname).get(0);
      return temp1;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public Arginfo visit(ExpressionList n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public Arginfo visit(ExpressionRest n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public Arginfo visit(PrimaryExpression n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isreq=1;
      argu.ispri=1;
      Arginfo temp1=n.f0.accept(this, argu);
      argu.ispri=0;
      if(n.f0.which==3){
    	  int a=prectr++;
    	  System.out.println("BEGIN");
    	  String strtofind=temp1.str2;
    	  String classname=argu.classname;
    	  if(globalmap.containsKey(strtofind)){
        	  System.out.println("\tMOVE TEMP "+a+" TEMP "+globalmap.get(strtofind)+" ");
          }
          else{
        	  System.out.println("\tHLOAD TEMP "+a+" TEMP 0 "+classpos(strtofind,classname)+" ");
          }
    	  System.out.println("RETURN TEMP "+a+"\nEND\n");
      }
      return temp1;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public Arginfo visit(IntegerLiteral n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" "+n.f0.tokenImage+" ");
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public Arginfo visit(TrueLiteral n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" 1 ");
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public Arginfo visit(FalseLiteral n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" 0 ");
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public Arginfo visit(Identifier n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      
      
      if(argu.isreq==0){
    	  return _ret;
      }
      Arginfo temp1=new Arginfo();
      String vartype=new String("");
      if(argu.ispri==1){
    	  temp1.str2=n.f0.tokenImage;
      }
      Table classdec=finaltable.symboltable.get(argu.classname);
      HashMap<String,String> metvars=new HashMap<String,String>();
      metvars=classdec.methodvars.get(argu.methodname);
      HashMap<String,String> classvars=classdec.varmap;
      String classname=argu.classname;
      while(true){
    	  if(metvars.containsKey(n.f0.tokenImage)){
        	  vartype=metvars.get(n.f0.tokenImage);
        	  break;
          }
          else if(classvars.containsKey(n.f0.tokenImage)){
        	  vartype=classvars.get(n.f0.tokenImage);
        	  break;
          }
          else if(finaltable.symboltable.get(classname).parent!=null){
        	  classname=finaltable.symboltable.get(classname).parent;
        	  classvars=finaltable.symboltable.get(classname).varmap;
          }
          else{
        	  break;
          }
      }
      if(vartype.length()==0){
    	  if(finaltable.symboltable.containsKey(n.f0.tokenImage)){
    		  vartype=n.f0.tokenImage;
    	  }
    	  else{
    		  System.out.println("Check Identifier");
    		  System.exit(1);
    	  }
      }
      
      temp1.str=vartype;
      return temp1;
   }

   /**
    * f0 -> "this"
    */
   public Arginfo visit(ThisExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" TEMP 0");
      Arginfo temp1=new Arginfo();
      temp1.str=argu.classname;
      return temp1;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public Arginfo visit(ArrayAllocationExpression n, Arginfo argu) {
      Arginfo _ret=null;
      
      int a=prectr++;
      int b=prectr++;
      int c=prectr++;
      int d=prectr++;
      int e=prectr++;
      int l1=labelctr++;
      int l2=labelctr++;
      System.out.println("BEGIN\nMOVE TEMP "+d+" ");
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      System.out.println("MOVE TEMP "+b+" PLUS TEMP "+d+" 1");
      System.out.println("MOVE TEMP "+a+" TIMES TEMP "+b+" 4");
      System.out.println("MOVE TEMP "+c+" HALLOCATE "+a);
      System.out.println("HSTORE TEMP "+c+" 0 TEMP "+d);
      
      System.out.println(" MOVE TEMP "+e+" 4\n");
      System.out.println(" L"+l1+" CJUMP LE TEMP "+e+" TEMP "+a+" L"+l2);
      System.out.println("\nHSTORE PLUS TEMP "+c+" TEMP "+e+" 0 0");
      System.out.println("MOVE TEMP "+e+" PLUS TEMP "+e+" 4");
      System.out.println("JUMP L"+l1+" ");
      System.out.println("L"+l2+" NOOP \n");  
      
      
      System.out.println("RETURN TEMP "+c+"\nEND\n");
      
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public Arginfo visit(AllocationExpression n, Arginfo argu) {
      Arginfo _ret=null;
      argu.isreq=0;
      
      int a=prectr++;
      int b=prectr++;
      int c=prectr++;
      int d=prectr++;
      int e=prectr++;
      
      String classname=n.f1.f0.tokenImage;
      HashMap<String,Integer> methodnum=finaltable.symboltable.get(classname).varnum;
      int num1=finaltable.symboltable.get(classname).varnum.size();
      num1++;
      int num2=finaltable.symboltable.get(classname).methodnum.size();
      int size1=num1*4;
      int size2=num2*4;
      System.out.println("BEGIN\n MOVE TEMP "+b+" HALLOCATE "+size1);
      System.out.println("MOVE TEMP "+c+" HALLOCATE "+size2);
      
      Iterator it=finaltable.symboltable.get(classname).methodnum.entrySet().iterator();
	  while(it.hasNext()){
		  Map.Entry pair = (Map.Entry)it.next();
		  String a1=(String) pair.getKey();
		  int b1=(Integer) pair.getValue();
		  System.out.println("HSTORE TEMP "+c+" "+b1+" "+a1);
	  }
	  System.out.println("HSTORE TEMP "+b+" 0"+" TEMP "+c);
	  
	  int i;
	  for(i=4;i<size1;i=i+4){
	       System.out.println(" HSTORE TEMP "+b+" "+i+" 0 \n");
	  }
	  System.out.println("RETURN TEMP "+b+" \nEND\n");
	  
	  
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      
      Arginfo temp1=new Arginfo();
      temp1.str=n.f1.f0.tokenImage;
      return temp1;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public Arginfo visit(NotExpression n, Arginfo argu) {
      Arginfo _ret=null;
      int a=prectr++;
      int l1=labelctr++;
      int l2=labelctr++;
      System.out.println("BEGIN\nCJUMP ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println(" L"+l1+" ");
      System.out.println("MOVE TEMP "+a+" 0\nJUMP L"+l2+" ");
      System.out.println("L"+l1+" ");
      System.out.println("MOVE TEMP "+a+" 1\nJUMP L"+l2+" ");
      System.out.println("L"+l2+" NOOP\n RETURN TEMP "+a+"\nEND\n");
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public Arginfo visit(BracketExpression n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      Arginfo temp = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      //System.err.println(argu.classname+" "+argu.methodname+" ");
      if(temp==null){
    	  //System.err.println("noo");
      }
      
      return temp;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public Arginfo visit(IdentifierList n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public Arginfo visit(IdentifierRest n, Arginfo argu) {
      Arginfo _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
 
